// <auto-generated />
using Content.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Content.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20181226051750_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity("Content.Data.Models.Asset", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("SiteId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Content.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("SiteId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Content.Data.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("SiteId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Content.Data.Models.PostGroup", b =>
                {
                    b.Property<string>("PostId");

                    b.Property<string>("GroupId");

                    b.Property<int>("Order");

                    b.HasKey("PostId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("PostGroups");
                });

            modelBuilder.Entity("Content.Data.Models.Site", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("Content.Data.Models.SiteUser", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("SiteId");

                    b.Property<int>("Order");

                    b.HasKey("UserId", "SiteId");

                    b.HasIndex("SiteId");

                    b.ToTable("SiteUsers");
                });

            modelBuilder.Entity("Content.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.Property<string>("Salt");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Content.Data.Models.Asset", b =>
                {
                    b.HasOne("Content.Data.Models.Site", "Site")
                        .WithMany("Assets")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Content.Data.Models.Group", b =>
                {
                    b.HasOne("Content.Data.Models.Site", "Site")
                        .WithMany("Groups")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Content.Data.Models.Post", b =>
                {
                    b.HasOne("Content.Data.Models.Site", "Site")
                        .WithMany("Posts")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Content.Data.Models.PostGroup", b =>
                {
                    b.HasOne("Content.Data.Models.Group", "Group")
                        .WithMany("PostGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Content.Data.Models.Post", "Post")
                        .WithMany("PostGroups")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Content.Data.Models.SiteUser", b =>
                {
                    b.HasOne("Content.Data.Models.Site", "Site")
                        .WithMany("SiteUsers")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Content.Data.Models.User", "User")
                        .WithMany("SiteUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
